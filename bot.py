import re
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.enums import ChatType
from aiogram.client.default import DefaultBotProperties
from aiogram.methods.delete_message import DeleteMessage

API_TOKEN = "7806448787:AAHblqT2XIvT2R_WQatxNxk35OZuzVreFno"

# Kirillga o‚Äògiruvchi funksiya
def to_cyrillic(text):
    mapping = {
        "a": "–∞", "b": "–±", "d": "–¥", "e": "–µ", "f": "—Ñ", "g": "–≥",
        "h": "“≥", "i": "–∏", "j": "–∂", "k": "–∫", "l": "–ª", "m": "–º",
        "n": "–Ω", "o": "–æ", "p": "–ø", "q": "“õ", "r": "—Ä", "s": "—Å",
        "t": "—Ç", "u": "—É", "v": "–≤", "x": "—Ö", "y": "–π", "z": "–∑",
        " º": "—ä", "'": "—ä", "‚Äô": "—ä"
    }
    replacements = [
        ("o‚Äò", "—û"), ("g‚Äò", "“ì"), ("sh", "—à"), ("ch", "—á"), ("ng", "–Ω–≥"),
        ("ya", "—è"), ("yo", "—ë"), ("yu", "—é"), ("ye", "–µ"), ("ts", "—Ü")
    ]
    text = text.lower()
    for old, new in replacements:
        text = text.replace(old, new)
    return ''.join(mapping.get(c, c) for c in text)

# Kalit so‚Äòzlar
logistics_keywords = [
    "–≥—Ä—É–∑", "—Ñ—É—Ä–∞", "–¥—Å–ø", "—Ç–µ–Ω—Ç", "–∫–æ–º–±–æ", "–æ–ø–ª–∞—Ç–∞", "–º–∞—à–∏–Ω–∞", "–≤–æ–¥–∏—Ç–µ–ª—å",
    "–π—É–∫", "—é–∫", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫–∞–∑–∞–Ω—å", "—Ç–∞—à–∫–µ–Ω—Ç", "–æ–ª–º–∞–ª–∏“õ", "–∞–Ω–¥–∏–∂–æ–Ω",
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–º–∞–Ω–∑–∏–ª", "—Å–ø—Ä–∏–Ω—Ç–µ—Ä", "–º–∞–Ω", "–≥–∞—Ñ—É—Ä–æ–≤", "–±–æ“ì–ª–∞–Ω–∏—à"
]

def is_logistics_related(text):
    text_cyr = to_cyrillic(text.lower())
    return any(kw in text_cyr for kw in logistics_keywords)

# Telefon raqam regex
PHONE_REGEX = re.compile(r"(?:(?:\+|00)998|998)?\s?-?(\d{2})\s?-?(\d{3})\s?-?(\d{2})\s?-?(\d{2})")

def extract_phone_number(text):
    match = PHONE_REGEX.search(text)
    return match.group(0) if match else None

def clean_text(text):
    return PHONE_REGEX.sub('', text)

# E'lon shabloni
def create_template(original_text):
    cleaned = clean_text(original_text.strip())
    template = f"""
______________________

{cleaned}
______________________

–Æ–∫ –±–∏–ª–∞–Ω –±–æ“ì–ª–∞–Ω–∏—à —É—á—É–Ω 
üëâ –ù–æ–º–µ—Ä–Ω–∏ –∫—û—Ä–∏—à üëà–Ω–∏ –±–æ—Å–∏–Ω–≥!
üëá   üëá   üëá   üëá   üëá   üëá
"""
    return template

# Tugma
def phone_button(phone):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëâ –ù–æ–º–µ—Ä–Ω–∏ –∫—û—Ä–∏—à üëà", callback_data=f"show:{phone}")]
    ])

# Bot va Dispatcher
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# /start komandasi
@dp.message(CommandStart())
async def start_handler(msg: types.Message):
    await msg.answer("üëã Assalomu alaykum!\n\nüìå Menga yuk e‚Äôlonini yuboring, men uni formatlab beraman.\n\nüì§ /elon ‚Äî yangi e'lon yuborish\n‚ÑπÔ∏è /help ‚Äî yordam")

# /help komandasi
@dp.message(Command("help"))
async def help_handler(msg: types.Message):
    await msg.answer("‚ùì Bot haqida:\n\nMenga yuk tashish bilan bog‚Äòliq e‚Äôlonlarni yuboring. Telefon raqam yashirinadi va \"–ù–æ–º–µ—Ä–Ω–∏ –∫—û—Ä–∏—à\" tugmasi orqali ko‚Äòrinadi.")

# /elon komandasi
@dp.message(Command("elon"))
async def elon_handler(msg: types.Message):
    await msg.answer("üì§ E‚Äôloningizni yuboring. Men uni avtomatik tarzda formatlab beraman.")

# Matnli xabarlar
@dp.message(F.text)
async def handle_message(msg: types.Message):
    if msg.chat.type == ChatType.PRIVATE:
        await process_ad(msg)

    elif msg.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.CHANNEL]:
        if is_logistics_related(msg.text):
            try:
                await bot(DeleteMessage(chat_id=msg.chat.id, message_id=msg.message_id))
            except:
                pass
            await process_ad(msg)

# E'lonni qayta ishlash
async def process_ad(msg: types.Message):
    phone = extract_phone_number(msg.text)
    if not phone:
        return
    text_cyr = to_cyrillic(msg.text)
    formatted = create_template(text_cyr)
    kb = phone_button(phone)
    await msg.answer(formatted, reply_markup=kb)

# Callback tugma
@dp.callback_query(F.data.startswith("show:"))
async def show_number(callback: types.CallbackQuery):
    phone = callback.data.split(":", 1)[1]
    await callback.message.answer(f"üìû {phone}")
    await callback.answer()

# Ishga tushirish
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
